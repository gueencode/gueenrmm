version: "3.7"

# networks
networks:
  proxy:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
  api-db: null
  redis: null
  mesh-db: null # docker managed persistent volumes

volumes:
  gueen_data: null
  postgres_data: null
  mongo_data: null
  mesh_data: null
  redis_data: null

services:
  # postgres database for api service
  gueen-postgres:
    container_name: grmm-postgres
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_DB: gueenrmm
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - api-db

  # redis container for celery tasks
  gueen-redis:
    container_name: grmm-redis
    image: redis:6.0-alpine
    command: redis-server --appendonly yes
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - redis

  # used to initialize the docker environment
  gueen-init:
    container_name: grmm-init
    image: ${IMAGE_REPO}gueen:${VERSION}
    restart: on-failure
    command: [ "gueen-init" ]
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASS: ${POSTGRES_PASS}
      APP_HOST: ${APP_HOST}
      API_HOST: ${API_HOST}
      MESH_USER: ${MESH_USER}
      MESH_HOST: ${MESH_HOST}
      grmm_USER: ${grmm_USER}
      grmm_PASS: ${grmm_PASS}
    depends_on:
      - gueen-postgres
      - gueen-meshcentral
    networks:
      - api-db
      - proxy
    volumes:
      - gueen_data:/opt/gueen

  # nats
  gueen-nats:
    container_name: grmm-nats
    image: ${IMAGE_REPO}gueen-nats:${VERSION}
    restart: always
    environment:
      API_HOST: ${API_HOST}
    ports:
      - "4222:4222"
    volumes:
      - gueen_data:/opt/gueen
    networks:
      api-db: null
      proxy:
        aliases:
          - ${API_HOST}

  # meshcentral container
  gueen-meshcentral:
    container_name: grmm-meshcentral
    image: ${IMAGE_REPO}gueen-meshcentral:${VERSION}
    restart: always
    environment:
      MESH_HOST: ${MESH_HOST}
      MESH_USER: ${MESH_USER}
      MESH_PASS: ${MESH_PASS}
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MESH_PERSISTENT_CONFIG: ${MESH_PERSISTENT_CONFIG}
    networks:
      proxy:
        aliases:
          - ${MESH_HOST}
      mesh-db: null
    volumes:
      - gueen_data:/opt/gueen
      - mesh_data:/home/node/app/meshcentral-data
    depends_on:
      - gueen-mongodb

  # mongodb container for meshcentral
  gueen-mongodb:
    container_name: grmm-mongodb
    image: mongo:4.4
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: meshcentral
    networks:
      - mesh-db
    volumes:
      - mongo_data:/data/db

  # container that hosts vue frontend
  gueen-frontend:
    container_name: grmm-frontend
    image: ${IMAGE_REPO}gueen-frontend:${VERSION}
    restart: always
    networks:
      - proxy
    environment:
      API_HOST: ${API_HOST}

  # container for django backend
  gueen-backend:
    container_name: grmm-backend
    image: ${IMAGE_REPO}gueen:${VERSION}
    command: [ "gueen-backend" ]
    restart: always
    networks:
      - proxy
      - api-db
      - redis
    volumes:
      - gueen_data:/opt/gueen
    depends_on:
      - gueen-postgres

  # container for django websockets connections
  gueen-websockets:
    container_name: grmm-websockets
    image: ${IMAGE_REPO}gueen:${VERSION}
    command: [ "gueen-websockets" ]
    restart: always
    networks:
      - proxy
      - api-db
      - redis
    volumes:
      - gueen_data:/opt/gueen
    depends_on:
      - gueen-postgres
      - gueen-backend

  # container for gueen reverse proxy
  gueen-nginx:
    container_name: grmm-nginx
    image: ${IMAGE_REPO}gueen-nginx:${VERSION}
    restart: always
    environment:
      APP_HOST: ${APP_HOST}
      API_HOST: ${API_HOST}
      MESH_HOST: ${MESH_HOST}
      CERT_PUB_KEY: ${CERT_PUB_KEY}
      CERT_PRIV_KEY: ${CERT_PRIV_KEY}
    networks:
      proxy:
        ipv4_address: 172.20.0.20
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - gueen_data:/opt/gueen

  # container for celery worker service
  gueen-celery:
    container_name: grmm-celery
    image: ${IMAGE_REPO}gueen:${VERSION}
    command: [ "gueen-celery" ]
    restart: always
    networks:
      - redis
      - proxy
      - api-db
    volumes:
      - gueen_data:/opt/gueen
    depends_on:
      - gueen-postgres
      - gueen-redis

  # container for celery beat service
  gueen-celerybeat:
    container_name: grmm-celerybeat
    image: ${IMAGE_REPO}gueen:${VERSION}
    command: [ "gueen-celerybeat" ]
    restart: always
    networks:
      - proxy
      - redis
      - api-db
    volumes:
      - gueen_data:/opt/gueen
    depends_on:
      - gueen-postgres
      - gueen-redis
